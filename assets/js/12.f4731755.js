(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{216:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"_3-docker常用命令详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker常用命令详解"}},[a._v("#")]),a._v(" 3.Docker常用命令详解")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"#run"}},[a._v("run")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#start"}},[a._v("start")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#kill"}},[a._v("kill")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#create"}},[a._v("create")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#exec"}},[a._v("exec")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#ps"}},[a._v("ps")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#iamges"}},[a._v("images")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#pull"}},[a._v("pull")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#search"}},[a._v("search")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#build"}},[a._v("build")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#commit"}},[a._v("commit")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#cp"}},[a._v("cp")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#create"}},[a._v("create")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#rm"}},[a._v("rm")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#rmi"}},[a._v("rmi")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#tag"}},[a._v("tag")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#exec"}},[a._v("exec")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#save"}},[a._v("save")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#import"}},[a._v("import")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#push"}},[a._v("push")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#tag"}},[a._v("tag")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#diff"}},[a._v("diff")])])]),a._v(" "),e("h2",{attrs:{id:"_1-容器生命周期管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-容器生命周期管理"}},[a._v("#")]),a._v(" 1.容器生命周期管理")]),a._v(" "),e("h3",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[a._v("#")]),a._v(" run")]),a._v(" "),e("p",[e("code",[a._v("run 创建一个新的容器并运行一个命令")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG…]\n    -d: 后台运行容器，并返回容器ID；\n    -i: 以交互模式运行容器，通常与 -t 同时使用；\n    -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n    -p: 端口映射，格式为：主机(宿主)端口:容器端口\n")])])]),e("ol",[e("li",[e("p",[a._v("使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。")]),a._v(" "),e("p",[a._v("docker run -p 80:80 -v /data:/data -d nginx:latest")])]),a._v(" "),e("li",[e("p",[a._v("绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。")]),a._v(" "),e("p",[a._v("docker run -p 127.0.0.1:80:8080/tcp ubuntu bash")])]),a._v(" "),e("li",[e("p",[a._v("使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。")]),a._v(" "),e("p",[a._v("docker run -it nginx:latest /bin/bash")])])]),a._v(" "),e("h3",{attrs:{id:"start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[a._v("#")]),a._v(" start")]),a._v(" "),e("p",[e("code",[a._v("start/stop/restart 启动一个或多个已经被停止的容器/停止一个运行中的容器/重启容器")]),a._v(" "),e("code",[a._v("docker start/stop/restart [OPTIONS] CONTAINER [CONTAINER…]")]),a._v("\n如：\n1. 启动已被停止的容器mynginx\ndocker start mynginx")]),a._v(" "),e("h3",{attrs:{id:"kill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[a._v("#")]),a._v(" kill")]),a._v(" "),e("p",[e("code",[a._v("kill 杀掉一个运行中的容器")]),a._v(" "),e("code",[a._v("docker kill [OPTIONS] CONTAINER [CONTAINER…]")]),a._v("\n-s :向容器发送一个信号\n如：\n1. 杀掉运行中的容器mynginx")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker kill -s KILL mynginx\n")])])]),e("h3",{attrs:{id:"rm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[a._v("#")]),a._v(" rm")]),a._v(" "),e("p",[e("code",[a._v("rm 删除一个或多少容器")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker rm [OPTIONS] CONTAINER [CONTAINER…]\n    -f :通过SIGKILL信号强制删除一个运行中的容器\n    -l :移除容器间的网络连接，而非容器本身\n    -v :-v 删除与容器关联的卷\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("pre",[e("code",[a._v("1. 强制删除容器db01、db02\n")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker rm -f db01 db02\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[a._v("移除容器nginx01对容器db01的连接，连接名db")]),a._v(" "),e("p",[a._v("docker rm -l db")])]),a._v(" "),e("li",[e("p",[a._v("删除容器nginx01,并删除容器挂载的数据卷\ndocker rm -v nginx01")])])]),a._v(" "),e("p",[e("code",[a._v("pause/unpause 暂停容器中所有的进程/恢复容器中所有的进程")]),a._v("\ndocker pause/unpause  [OPTIONS] CONTAINER [CONTAINER…]\n如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("暂停数据库容器db01提供服务")]),a._v(" "),e("p",[a._v("docker pause db01")])]),a._v(" "),e("li",[e("p",[a._v("恢复数据库容器db01提供服务")]),a._v(" "),e("p",[a._v("docker unpause db01")])])]),a._v(" "),e("h3",{attrs:{id:"create"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create"}},[a._v("#")]),a._v(" create")]),a._v(" "),e("p",[e("code",[a._v("create 创建一个新的容器但不启动它")])]),a._v(" "),e("p",[e("code",[a._v("docker create [OPTIONS] IMAGE [COMMAND] [ARG…]")]),a._v("\n如：")]),a._v(" "),e("ol",[e("li",[a._v("使用docker镜像nginx:latest创建一个容器,并将容器命名为mynginx")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker create  --name mynginx  nginx:latest\n")])])]),e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[a._v("#")]),a._v(" exec")]),a._v(" "),e("p",[e("code",[a._v("exec 在运行的容器中执行命令")])]),a._v(" "),e("p",[e("code",[a._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG…]")]),a._v("\n-d :分离模式: 在后台运行\n-i :即使没有附加也保持STDIN 打开\n-t :分配一个伪终端\n如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("在容器mynginx中以交互模式执行容器内/root/t.sh脚本")]),a._v(" "),e("p",[a._v("docker exec -it mynginx /bin/sh /root/t.sh")])]),a._v(" "),e("li",[e("p",[a._v("在容器mynginx中开启一个交互模式的终端")]),a._v(" "),e("p",[a._v("docker exec -i -t  mynginx /bin/bash")])])]),a._v(" "),e("h1",{attrs:{id:"修改欢迎页内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改欢迎页内容"}},[a._v("#")]),a._v(" 修改欢迎页内容")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n")])])]),e("h2",{attrs:{id:"_2-容器操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-容器操作"}},[a._v("#")]),a._v(" 2.容器操作")]),a._v(" "),e("h3",{attrs:{id:"ps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[a._v("#")]),a._v(" ps")]),a._v(" "),e("p",[e("code",[a._v("ps 列出容器")]),a._v("\n-a :显示所有的容器，包括未运行的。\n-f :根据条件过滤显示的内容。\n--format :指定返回值的模板文件。\n-l :显示最近创建的容器。\n-n :列出最近创建的n个容器。\n--no-trunc :不截断输出。\n-q :静默模式，只显示容器编号。\n-s :显示总的文件大小。\n如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("列出所有在运行的容器信息")]),a._v(" "),e("p",[a._v("docker ps")])]),a._v(" "),e("li",[e("p",[a._v("列出最近创建的5个容器信息")]),a._v(" "),e("p",[a._v("docker ps -n 5")])]),a._v(" "),e("li",[e("p",[a._v("列出所有创建的容器ID")]),a._v(" "),e("p",[a._v("docker ps -a -q")])])]),a._v(" "),e("p",[e("code",[a._v("inspect 获取容器/镜像的元数据")]),a._v("\ndocker inspect [OPTIONS] NAME|ID [NAME|ID...]\n-f :指定返回值的模板文件。\n-s :显示总的文件大小。\n--type :为指定类型返回JSON。\n如：")]),a._v(" "),e("ol",[e("li",[a._v("获取镜像mysql:5.6的元信息")])]),a._v(" "),e("p",[a._v("docker inspect mysql:5.6")]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[a._v("获取正在运行的容器dmysql的 IP\ndocker inspect —format="),e("code",[a._v("{range .NetworkSettings.Networks}{.IPAddress}{end}")]),a._v(" dmysql")])]),a._v(" "),e("p",[a._v("docker attach [OPTIONS] CONTAINER\n要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。\n官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上--sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。")]),a._v(" "),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("容器mynginx将访问日志指到标准输出，连接到容器查看访问信息")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker attach --sig-proxy=false mynginx\n")])])]),e("p",[e("code",[a._v("events 从服务器获取实时事件")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker events [OPTIONS]\n    -f ：根据条件过滤事件；\n    --since ：从指定的时间戳后显示所有事件;\n    --until ：流水时间显示到指定的时间为止；\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("显示docker 2018年8月1日后的所有事件")]),a._v(" "),e("p",[a._v('docker events  --since=“2018-08-01"')])]),a._v(" "),e("li",[e("p",[a._v("显示docker 镜像为mysql:5.6 2018年8月1日后的相关事件")]),a._v(" "),e("p",[a._v('docker events -f "image"="mysql:5.6" --since="2018-08-01”')])])]),a._v(" "),e("p",[a._v('如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如--since="2016-07-01"。')]),a._v(" "),e("p",[e("code",[a._v("logs 获取容器的日志")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker logs [OPTIONS] CONTAINER\n    -f : 跟踪日志输出\n    --since :显示某个开始时间的所有日志\n    -t : 显示时间戳\n    --tail :仅列出最新N条容器日志\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("跟踪查看容器mynginx的日志输出")]),a._v(" "),e("p",[a._v("docker logs -f mynginx")])]),a._v(" "),e("li",[e("p",[a._v("查看容器mynginx从2018年7月1日后的最新10条日志")]),a._v(" "),e("p",[a._v('docker logs --since="2018-07-01" --tail=10 mynginx')])])]),a._v(" "),e("p",[e("code",[a._v("wait 阻塞运行直到容器停止，然后打印出它的退出代码")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker wait [OPTIONS] CONTAINER [CONTAINER…]\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("docker wait CONTAINER")])]),a._v(" "),e("p",[e("code",[a._v("export 将文件系统作为一个tar归档文件导出到STDOUT")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker export [OPTIONS] CONTAINER\n    -o :将输入内容写到文件。\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("将id为a404c6c174a2的容器按日期保存为tar文件")]),a._v(" "),e("pre",[e("code",[a._v(" docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n")])])])]),a._v(" "),e("p",[e("code",[a._v("port 列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("查看容器mynginx的端口映射情况")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker port mymysql\n")])])]),e("h2",{attrs:{id:"_3-容器rootfs命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器rootfs命令"}},[a._v("#")]),a._v(" 3.容器rootfs命令")]),a._v(" "),e("h3",{attrs:{id:"commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[a._v("#")]),a._v(" commit")]),a._v(" "),e("p",[e("code",[a._v("commit 从容器创建一个新的镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n    -a :提交的镜像作者；\n    -c :使用Dockerfile指令来创建镜像；\n    -m :提交时的说明文字；\n    -p :在commit时，将容器暂停。\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('1. docker commit -a “leo" -m "my apache" a404c6c174a2  mymysql:v1 \n2. docker commit \\\n    --author "leo <myemail@gmail.com>" \\\n    --message "修改了默认主页" \\\n    mynginx \\\n    nginx:v2\n')])])]),e("h3",{attrs:{id:"cp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cp"}},[a._v("#")]),a._v(" cp")]),a._v(" "),e("p",[e("code",[a._v("cp 用于容器与主机之间的数据拷贝")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n   docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n   -L :保持源目标中的链接\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("将主机/www/test目录拷贝到容器96f7f14e99ab的/www目录下。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker cp /www/test 96f7f14e99ab:/www/\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("将主机/www/test目录拷贝到容器96f7f14e99ab中，目录重命名为www")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("    docker cp /www/test 96f7f14e99ab:/www\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker cp  96f7f14e99ab:/www /tmp/\n")])])]),e("h3",{attrs:{id:"diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[a._v("#")]),a._v(" diff")]),a._v(" "),e("p",[e("code",[a._v("diff 检查容器里文件结构的更改")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker diff [OPTIONS] CONTAINER\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("查看容器mymysql的文件结构更改")])]),a._v(" "),e("p",[a._v("docker diff mymysql\ndocker diff mginx")]),a._v(" "),e("h2",{attrs:{id:"_4-镜像仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-镜像仓库"}},[a._v("#")]),a._v(" 4.镜像仓库")]),a._v(" "),e("p",[e("code",[a._v("login/logout 登陆/登出到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker login/logout [OPTIONS] [SERVER]\n\n-u :登陆的用户名\n-p :登陆的密码\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("登陆到Docker Hub")]),a._v(" "),e("p",[a._v("docker login -u 用户名 -p 密码")])]),a._v(" "),e("li",[e("p",[a._v("登出Docker Hub")]),a._v(" "),e("p",[a._v("docker logout")])])]),a._v(" "),e("h3",{attrs:{id:"pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[a._v("#")]),a._v(" pull")]),a._v(" "),e("p",[e("code",[a._v("pull 从镜像仓库中拉取或者更新指定镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n\n-a :拉取所有 tagged 镜像\n--disable-content-trust :忽略镜像的校验,默认开启\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("从Docker Hub下载java最新版镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull java\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("从Docker Hub下载REPOSITORY为java的所有镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull -a java\n")])])]),e("h3",{attrs:{id:"push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[a._v("#")]),a._v(" push")]),a._v(" "),e("p",[e("code",[a._v("push 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker push [OPTIONS] NAME[:TAG]\n\n--disable-content-trust :忽略镜像的校验,默认开启\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("上传本地镜像myapache:v1到镜像仓库中")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker push myapache:v1\n")])])]),e("h3",{attrs:{id:"search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[a._v("#")]),a._v(" search")]),a._v(" "),e("p",[e("code",[a._v("search 从Docker Hub查找镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("    docker search [OPTIONS] TERM\n    --automated :只列出 automated build类型的镜像；\n    --no-trunc :显示完整的镜像描述；\n    -s :列出收藏数不小于指定值的镜像\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("从Docker Hub查找所有镜像名包含java，并且收藏数大于10的镜像")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker search -s 10 java\n")])])]),e("h2",{attrs:{id:"_5-本地镜像管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-本地镜像管理"}},[a._v("#")]),a._v(" 5.本地镜像管理")]),a._v(" "),e("h3",{attrs:{id:"images"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#images"}},[a._v("#")]),a._v(" images")]),a._v(" "),e("p",[e("code",[a._v("images 列出本地镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker images [OPTIONS] [REPOSITORY[:TAG]]\n    -a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；\n    --digests :显示镜像的摘要信息；\n    -f :显示满足条件的镜像；\n    --format :指定返回值的模板文件；\n    --no-trunc :显示完整的镜像信息；\n    -q :只显示镜像ID。\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("查看本地镜像列表")]),a._v(" "),e("p",[a._v("docker images")])]),a._v(" "),e("li",[e("p",[a._v("列出本地镜像中REPOSITORY为ubuntu的镜像列表")]),a._v(" "),e("p",[a._v("docker images  ubuntu​")])])]),a._v(" "),e("h3",{attrs:{id:"rmi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rmi"}},[a._v("#")]),a._v(" rmi")]),a._v(" "),e("p",[e("code",[a._v("rmi 删除本地一个或多少镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker rmi [OPTIONS] IMAGE [IMAGE…]\n    -f :强制删除；\n    -no-prune :不移除该镜像的过程镜像，默认移除；\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("强制删除本地镜像test/ubuntu:v4")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker rmi -f test/ubuntu:v4\n")])])]),e("h3",{attrs:{id:"tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[a._v("#")]),a._v(" tag")]),a._v(" "),e("p",[e("code",[a._v("tag 标记本地镜像，将其归入某一仓库")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("将镜像ubuntu:15.10标记为 test/ubuntu:v3 镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker tag ubuntu:15.10 test/ubuntu:v3\n")])])]),e("h3",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[a._v("#")]),a._v(" build")]),a._v(" "),e("p",[e("code",[a._v("build 命令用于使用 Dockerfile 创建镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('docker build [OPTIONS] PATH | URL | -\n    \n    --build-arg=[] :设置镜像创建时的变量；\n    --cpu-shares :设置 cpu 使用权重；\n    --cpu-period :限制 CPU CFS周期；\n    --cpu-quota :限制 CPU CFS配额；\n    --cpuset-cpus :指定使用的CPU id；\n    --cpuset-mems :指定使用的内存 id；\n    --disable-content-trust :忽略校验，默认开启；\n    -f :指定要使用的Dockerfile路径；\n    --force-rm :设置镜像过程中删除中间容器；\n    --isolation :使用容器隔离技术；\n    --label=[] :设置镜像使用的元数据；\n    -m :设置内存最大值；\n    --memory-swap :设置Swap的最大值为内存+swap，"-1"表示不限swap；\n    --no-cache :创建镜像的过程不使用缓存；\n    --pull :尝试去更新镜像的新版本；\n    --quiet, -q :安静模式，成功后只输出镜像 ID；\n    --rm :设置镜像成功后删除中间容器；\n    --shm-size :设置/dev/shm的大小，默认值是64M；\n    --ulimit :Ulimit配置。\n    --tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。\n    --network: 默认 default。在构建期间设置RUN指令的网络模式\n')])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("使用当前目录的 Dockerfile 创建镜像，标签为 test/ubuntu:v1")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t test/ubuntu:v1 .​\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build github.com/creack/docker-firefox\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("也可以通过 -f Dockerfile 文件的位置")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -f /path/to/a/Dockerfile .\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t test/myapp .\n")])])]),e("p",[e("code",[a._v("history 查看指定镜像的创建历史")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker history [OPTIONS] IMAGE\n    -H :以可读的格式打印镜像大小和日期，默认为true；\n    --no-trunc :显示完整的提交记录；\n    -q :仅列出提交记录ID。\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("查看本地镜像test/ubuntu:v3的创建历史")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker history test/ubuntu:v3​\n")])])]),e("h3",{attrs:{id:"save"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#save"}},[a._v("#")]),a._v(" save")]),a._v(" "),e("p",[e("code",[a._v("save/load 将指定镜像保存成 tar 归档文件/导入")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ocker save [OPTIONS] IMAGE [IMAGE…]\n    -o :输出到的文件\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("将镜像test/ubuntu:v3 生成my_ubuntu_v3.tar文档")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker save -o my_ubuntu_v3.tar test/ubuntu:v3\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("将ubuntu.tar从归档文件导入镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker load<ubuntu.tar\n")])])]),e("h3",{attrs:{id:"import"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[a._v("#")]),a._v(" import")]),a._v(" "),e("p",[e("code",[a._v("import/")]),e("a",{attrs:{href:"#export"}},[a._v("export")]),e("code",[a._v("从归档文件中创建镜像/将文件系统作为一个tar归档文件导出到STDOUT")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n    -c :应用docker 指令创建镜像；\n    -m :提交时的说明文字；\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为test/ubuntu:v4")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker import  my_ubuntu_v3.tar test/ubuntu:v4\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("将id为a404c6c174a2的容器按日期保存为tar文件")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n")])])]),e("h3",{attrs:{id:"info-version"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#info-version"}},[a._v("#")]),a._v(" info|version")]),a._v(" "),e("p",[e("code",[a._v("info 显示 Docker 系统信息，包括镜像和容器数")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker info [OPTIONS]\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("查看docker系统信息")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker info\n")])])]),e("p",[e("code",[a._v("version 显示 Docker 版本信息")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker version [OPTIONS]\n\n    -f :指定返回值的模板文件。\n")])])]),e("p",[a._v("如：")]),a._v(" "),e("ol",[e("li",[a._v("显示 Docker 版本信息")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker version\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);